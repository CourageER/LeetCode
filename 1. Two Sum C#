Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

public class Solution {
public int[] TwoSum(int[] nums, int target)
        {
            for (int i = 0; i < nums.Count(); i++)
            {
                List<int> result = new List<int>();
                result.Add(i);//多此一举
                int temp = target - nums[i];
                for (int j = i + 1; j < nums.Count(); j++)
                {
                    if (temp == nums[j])
                    {
                        result.Add(j);//Add要大写
                        return result.ToArray();//多此一举
                    }
                }
            }
            return new int[1];
        }
不需要在外面创建新数组
TLE

public int[] TwoSum(int[] nums, int target)
        {
            for (int i = 0; i < nums.Count(); i++)
            {
                int temp = target - nums[i];
                for (int j = i + 1; j < nums.Count(); j++)
                {
                    if (temp == nums[j])
                    {
                        return new int[]{i,j};//返回的时候直接创建数组就行
                    }
                }
            }
            return new int[1];
        }
        比上面一种，只需要在找到并返回的时候创建数组就行了
        但是时间复杂度是O(N平方)，超时了
        TLE
        
public int[] TwoSum(int[] nums, int target)
        {
            Dictionary<int, int> dic = new Dictionary<int, int>();
            for (int i = 0; i < nums.Count(); i++)
            {
                dic.Add(nums[i], i);

            }
            for (int j = 0; j < nums.Count(); j++)
            {
                if (dic.ContainsKey(target - nums[j]))
                {
                    return new int[] {j, dic[target - nums[j]]};
                }
            }
                return new int[1];
        }
Runtime Error Message:
Line 7: System.ArgumentException: An item with the same key has already been added.
Last executed input:
[3,3]
6
Dic里不能添加相同的key,需要判断一下是否存在

public int[] TwoSum(int[] nums, int target)
        {
            Dictionary<int, int> dic = new Dictionary<int, int>();
            for (int i = 0; i < nums.Count(); i++)
            {
                if (dic.ContainsKey(nums[i]))
                {
                    continue;//判断是否存在
                }
                dic.Add(nums[i], i);
            }
            for (int j = 0; j < nums.Count(); j++)
            {
                if (dic.ContainsKey(target - nums[j]))
                {
                    return new int[] {j, dic[target - nums[j]]};
                }
            }
                return new int[1];
        }
        Your input

[3,2,4]
6
Your answer
[0,0]
Expected answer
[1,2]
要检查当前循环不能是自己的这个位置

public int[] TwoSum(int[] nums, int target)
        {
            Dictionary<int, int> dic = new Dictionary<int, int>();
            for (int i = 0; i < nums.Count(); i++)
            {
                if (dic.ContainsKey(nums[i]))
                {
                    continue;
                }
                dic.Add(nums[i], i);//Add要大写
            }
            for (int j = 0; j < nums.Count(); j++)
            {
                if (dic.ContainsKey(target - nums[j]) && dic[target - nums[j]] != j)//判断对应的位置不是自己
                {
                    return new int[] {j, dic[target - nums[j]]};
                }
            }
                return new int[1];
        }
        //AC了！！！
        //为什么这个能过[3,3]和6的测试用例呢？？？
        因为最终出结果的是在第二个循环里，在第二个循环里元素重复并没有关系
        整理map的时候需要排重，虽然map里排除了，但是遍历nums的时候是把每个元素都遍历到的，关键在第二个循环里
       
       
public int[] TwoSum(int[] nums, int target)
    {
        Dictionary<int, int> dic = new Dictionary<int, int>();
            for (int j = 0; j < nums.Count(); j++)
            {
                //if (dic.ContainsKey(nums[j]))
                //{
                //    continue;
                //}
                //dic.Add(nums[j], j);
                if (dic.ContainsKey(target - nums[j]) && dic[target - nums[j]] != j)
                {
                    return new int[] { j, dic[target - nums[j]] };
                }
                if (dic.ContainsKey(nums[j]))
                {
                    continue;
                }
                dic.Add(nums[j], j);
            }
            return new int[1];
    }
    AC！！！
    精髓了，可以放在一个循环里面做完添加map和判断是否存在的操作
    但是要注意：一定要先查找在不在然后再添加元素，先添加就会报错，比如下面这样：
    其实先找再添加就和上面能通过{3,3}的道理一样，因为关键在于找的过程（也就是上面第二个循环里），在找的过程中每个都会遍历到，而添加的时候是要排重的
    所以先找再添加
        
public int[] TwoSum(int[] nums, int target)
    {
        Dictionary<int, int> dic = new Dictionary<int, int>();
            for (int j = 0; j < nums.Count(); j++)
            {
                if (dic.ContainsKey(nums[j]))
                {
                    continue;
                }
                dic.Add(nums[j], j);
                if (dic.ContainsKey(target - nums[j]) && dic[target - nums[j]] != j)
                {
                    return new int[] { j, dic[target - nums[j]] };
                }
            }
            return new int[1];
    }
Input:
[3,3]
6
Output:
[0]
Expected:
[0,1]
        
